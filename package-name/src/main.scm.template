;;; File: main.scm
;;
;;; License:
;; Copyright © $year $author <$email>
;;
;; This file is part of $packageName.
;;
;; $packageName is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; $packageName is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with <PACKAGE>. If not, see <http://www.gnu.org/licenses/>.
;;
;;; Author:     $author <$email>
;;; Maintainer: $author <$email>
;;; Created:    $date
;;
;;; Homepage:   $website
;;
;;; Commentary:
;; Main entry point for command-line invocation of the program.
;;
;;; Code:


;;; ----------------------------------------------------------------------------
;;; -------------------------------- Preamble ----------------------------------
;;; ----------------------------------------------------------------------------


(define-module (<MODULE-NAME> main)
  #:use-module (<MODULE-NAME> util)
  #:use-module (scheme documentation)
  #:use-module (ice-9 getopt-long)
  #:use-module (ice-9 command-line)
  #:use-module (ice-9 pretty-print)
  #:use-module (ice-9 match)
  #:use-module (ice-9 regex)
  #:use-module (ice-9 iconv)
  #:use-module (rnrs io ports)
  #:use-module (unit-test)
  #:export     (main))


;;; ----------------------------------------------------------------------------
;;; ------------------------------ Main code body ------------------------------
;;; ----------------------------------------------------------------------------


;; Just an example program
(define* (main-program options)
  (let* ([refopt   (λ [opt default] (option-ref options opt default))]
         [all-opts (refopt '()  #f)]
         [foo-val  (refopt 'foo #f)]
         [bar-val  (refopt 'bar #f)])
    (printfln "Hello, world!")
    (printfln "Full option list: ~a" all-opts)
    (printfln "Option -f / --foo was ~a" (if foo-val "given." "not given."))
    (if bar-val
        (begin (printfln "Option -b / --bar was given")
               (printfln "Value: ~a" bar-val))
        (printfln "Option -b / --bar was not given"))
    (printfln "Exiting successfully.")
    (dexit 0)))


;;; ----------------------------------------------------------------------------
;;; --------------------------- Standard boilerplate ---------------------------
;;; ----------------------------------------------------------------------------


(define* option-spec
  `(,@extra-options-spec
    (version (single-char #\v) (value #f))
    (help    (single-char #\h) (value #f))))

(define* (main args)
  (process-args option-spec args main-program #:stop? #t))


;;; ----------------------------------------------------------------------------
;;; -------------------------------- Unit tests --------------------------------
;;; ----------------------------------------------------------------------------


(define-class <main-result> (<test-result>))

(define-method (main-summary (self <main-result>))
  (printfln "Hello, World!")
  (pretty-print (tests-log self))
  (for-each (λ [msg] (cprintfln "~a" msg))
            (failure-messages self)))

(define-class <main-test> (<test-case>))

(define-method (test-args-1 (test-case <main-test>))
  (assert-equal #t #f))

(define-method (test-args-2 (test-case <main-test>))
  (assert-equal #t #f))

(define-method (test-args-3 (test-case <main-test>))
  (assert-equal #f #f))

(define-method (test-args-4 (test-case <main-test>))
  (assert-equal #t #f))

(define (run-tests)
  (let ([suite   (make <test-suite> #:name "Test suite 1")]
        [results (make <main-result>)])
    (add suite (make <main-test> #:name "Main tests"))
    (run suite results)
    (main-summary results)
    (summary results)))
